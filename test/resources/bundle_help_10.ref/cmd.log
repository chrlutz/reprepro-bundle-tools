usage: bundle seal [-h] [--own-suite OWN_SUITE] [--commit] [--clean-commit]
                   [--git-repo-url GIT_REPO_URL] [--git-branch GIT_BRANCH]
                   [--global-blacklist-file GLOBAL_BLACKLIST_FILE]
                   bundleName

Subcommand seal: Mark the bundle as ReadOnly and change a suite's tag from
'staging' to 'deploy'.

positional arguments:
  bundleName            The bundleName is a value in the format
                        <distribution>[/<bundleID>] that points to the path in
                        the folder repo/bundle/ in which the bundle is stored.
                        Is is possible to just provide the <distribution>
                        part. In this case, there will be a new bundle (with a
                        newly incremented bundleID) created for this
                        distribution. To support command line completion, it
                        is also allowed to specify the full path relative to
                        the projects root in the form
                        repo/bundle/<distribution>[/<bundleID>].

optional arguments:
  -h, --help            show this help message and exit
  --own-suite OWN_SUITE
                        Suite-Selectors that defines the own suite (the suite
                        of this bundle). The default value is
                        'bundle:{bundle}'.
  --global-blacklist-file GLOBAL_BLACKLIST_FILE
                        A global blacklist file that is checked before a
                        bundle could be sealed. We would deny 'seal', if the
                        bundle contains a binary package mentioned there. Per
                        default this file is FilterList.purge-
                        from-{distribution}.

additional arguments for git-commit management:
  --commit              Commit changed files to the (local) project git-
                        repository.
  --clean-commit        Create a clone of the current git-repository into a
                        temporary folder, automatically commit changes there
                        and immediately push back the changes to the git
                        server.
  --git-repo-url GIT_REPO_URL
                        GIT-Repository URL used to clone the repository during
                        --clean-commit. Per default the current git tracking
                        branch is used (if set).
  --git-branch GIT_BRANCH
                        GIT-Repository branch used to pull and push during
                        --clean-commit. The default is 'master'.
