#!/usr/bin/python3

import subprocess
import logging
import sys
import apt_repos
import argparse
import json
import urllib3
import tempfile
import os.path
import shutil
from urllib.parse import urljoin

PROGNAME = "apt-add-bundle"
logger = logging.getLogger(PROGNAME)

BUNDLE_REPOS = "/etc/apt-repos/bundle.repos"
SOURCES_LIST_FILE = "/etc/apt/sources.list.d/apt-add-bundle.list"

def get_added_bundles():
    res = set()
    try:
        with open(SOURCES_LIST_FILE) as listFile:
            for line in listFile.readlines():
                if line.startswith("# bundle:"):
                    parts = line.split()
                    bundle = parts[1]
                    res.add(bundle)
    except FileNotFoundError as e:
        logger.warning("List file {} doesn't exist!".format(SOURCES_LIST_FILE))
    return res


def create_list_file(bundles):
    got = set()
    with open(SOURCES_LIST_FILE, "w") as listFile:
        print("# This file is managed by the command line tool '{}'. DON'T EDIT IT MANUALLY!".format(PROGNAME), file=listFile)
        l_bundles = list(sorted(bundles))
        suites = apt_repos.getSuites(l_bundles)
        for suite in sorted(suites):
            got.add(str(suite))
            print("\n# {}".format(suite), file=listFile)
            print(suite.getSourcesList(), file=listFile)
    miss = bundles - got
    if len(miss) > 0:
        logger.warning("The following bundles could not be added: " + ", ".join(sorted(miss)))


def setup_logging(loglevel):
    '''
       Initializing logging and set log-level
    '''
    kwargs = {
        'format': '%(levelname)s[%(name)s]: %(message)s',
        'level': loglevel,
        'stream': sys.stderr
    }
    logging.basicConfig(**kwargs)
    logging.getLogger("urllib3").setLevel(logging.ERROR)
    logging.getLogger("apt_repos").setLevel(logging.ERROR)


def get_dynamic_bundle_list(mainUrl, outDir):
    dynamic_bundles_url = urljoin(mainUrl, "bundle.repos")
    http = urllib3.PoolManager()
    try:
        req = http.request('GET', dynamic_bundles_url)
        bundles = json.loads(req.data)
    except json.decoder.JSONDecodeError as e:
        logger.warn("Failed to parse bundle.repos from URL '{}': {}".format(dynamic_bundles_url, e))
        sys.exit(1)

    for dist in bundles:
        rollout_bundles = []
        for bundle in dist.get('Suites', []):
            if isinstance(bundle, dict) and "rollout" in bundle.get('Tags', []):
                rollout_bundles.append(bundle)
                dist['Suites'] = rollout_bundles

    with open(os.path.join(outDir, "bundle_dyn.repos"), "w") as out:
        print(json.dumps(bundles, indent=4, sort_keys=True), file=out)
        logger.info("Received bundle.repos with {} bundles tagged as 'rollout'".format(len(rollout_bundles)))


def get_bundle_repos_main_urls():
    res = set()
    with open(BUNDLE_REPOS) as repos:
        conf = json.load(repos)
        for dist in conf:
            url = dist.get("Url")
            if url:
                res.add(url)
    return res


def get_bundle_suites_from_server(baseUrl):
    tmpDir = tempfile.mkdtemp()
    logger.debug("temporary Directory: {}".format(tmpDir))
    shutil.copyfile(BUNDLE_REPOS, os.path.join(tmpDir, "bundle.repos"))
    get_dynamic_bundle_list(baseUrl, tmpDir)
    apt_repos.setAptReposBaseDir(tmpDir)
    res = set(apt_repos.getSuites(":"))
    shutil.rmtree(tmpDir)
    return res


def main():
    parser = argparse.ArgumentParser(description=__doc__, prog=PROGNAME, add_help=True)
    parser.add_argument("-d", "--debug", action="store_true", help="""
                        Show debug messages""")
    parser.add_argument("-r", "--remove", action="store_true", help="""
                        Remove the named bundle(s) from the list (instead of adding them)""")
    parser.add_argument("-l", "--list", action="store_true", help="""
                        (Finally) List all bundles that are currently added""")
    parser.add_argument("-a", "--available", action="store_true", help="""
                        List all bundles available on the configured remote server""")
    parser.add_argument("bundleName", nargs="*", help="""
                        Names of bundles to add / remove either in the form 'bundle:<distribution>/<NUMBER>' or just '<distribution>/<NUMBER>'""")
    args = parser.parse_args()
    
    setup_logging(logging.INFO if not args.debug else logging.DEBUG)

    bundle_suites = set()
    for baseUrl in sorted(get_bundle_repos_main_urls()):
        logger.info("Getting bundles from server {} â€¦".format(baseUrl))
        res = get_bundle_suites_from_server(baseUrl)
        logger.info("Got {} bundles".format(len(res)))
        bundle_suites = bundle_suites.union(res)

    if args.available:
        for suite in sorted(bundle_suites):
            print(suite)
        return

    bundles = get_added_bundles()
    update = False
    for name in args.bundleName:
        update = True
        bundleName = name if name.startswith("bundle:") else "bundle:{}".format(name)
        if not args.remove:
            bundles.add(bundleName)
        else:
            bundles.remove(bundleName)
    if update:
        create_list_file(bundles)
    if args.list:
        print("\n".join(sorted(bundles)))
        sys.exit(0)



if __name__ == "__main__":
    main()
